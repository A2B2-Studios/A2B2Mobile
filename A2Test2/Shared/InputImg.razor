
<p class="m-0">
    <label>@Label</label>
</p>
<p class="mb-4">
    <button type="button" @onclick="PickPhoto" class="btn btn-outline-info">Choose from Device</button>

</p>



<div>
    @if (imageBase64 != null)
    {
        <div>
            <div style="margin:10px">
                <img src="data:image/jpeg;base64, @imageBase64" style="max-width: 100%;" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Upload Image";
    [Parameter] public EventCallback<string> OnSelectedImage { get; set; }
    private string imageBase64;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var imagesFiles = e.GetMultipleFiles();

        foreach (var imageFile in imagesFiles)
        {
            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(maxAllowedSize: 20971520).ReadAsync(buffer);
            imageBase64 = Convert.ToBase64String(buffer);
            await OnSelectedImage.InvokeAsync(imageBase64);
            StateHasChanged();
        }
    }

    async void PickPhoto()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult photo = await MediaPicker.Default.PickPhotoAsync();

            if (photo != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    using Stream sourceStream = await photo.OpenReadAsync();
                    sourceStream.CopyTo(memoryStream);
                    var memArr = memoryStream.ToArray();
                    imageBase64 = Convert.ToBase64String(memArr);
                    await OnSelectedImage.InvokeAsync(imageBase64);
                    StateHasChanged();
                }
                
                
            }
        }
    }
}