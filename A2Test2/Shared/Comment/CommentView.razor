@using A2Test2.Helpers
@using Humanizer
@inject IImagePostRepository postRepository

<AuthorizeView>

    <Authorized>
        <CommentBox OnValidSubmit="OnValidSubmit" PostId="PostId" />
    </Authorized>
    <NotAuthorized>
        <LoginDisplay /> to comment.

    </NotAuthorized>
</AuthorizeView>


<PopupModal @ref="deleteModalRef">
    <ModalTitle>
        Delete Comment
    </ModalTitle>
    <ModalBody>
        <p>Are you sure you want to delete this comment?</p>    
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-danger" @onclick="DeleteComment">Delete</button>
        <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
    </ModalFooter>
</PopupModal>

<PopupModal @ref="replyModalRef">
    <ModalTitle>
        Reply to @CommenterUsername
    </ModalTitle>
    <ModalBody>
        <p style="color: red;">@replyCommentMessage</p>
        <Label>Reply</Label>
        <textarea @bind="ReplyText" class="form-control"></textarea>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-secondary" @onclick="HideReplyModal">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="PostReply">Submit</button>
    </ModalFooter>
</PopupModal>


@if (Comments == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var comment in Comments)
    {
        <div class="comment-view">
            <span class="submitted-by">
                <UsernameDisplay UserId="@comment.Commenter.Id" /> @DateTime.Now.Subtract(comment.PostTime.ToLocalTime()).Humanize() ago
            </span>
            <p>@comment.CommentText </p>
            <AuthorizeView>
                <Authorized>
                    <div class="comment-actions">
                        <ul>
                            <li><a @onclick="() => ShowReplyModal(comment.Id)">Reply</a></li>
                            @if (context.User.Claims.GetUserId() == comment.Commenter.Id)
                            {
                                <li><a @onclick="() => ShowDeleteModal(comment.Id)">Delete</a></li>
                            }
                        </ul>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <small style="margin-bottom: 1px;"><LoginDisplay /> to comment.</small>
                </NotAuthorized>
            </AuthorizeView>

        </div>
        @foreach (var reply in comment.ReplyComments)
        {
            <div class="indented">
                <div class="comment-view">
                    <span class="submitted-by">
                        <UsernameDisplay UserId="@reply.Commenter.Id" /> @DateTime.Now.Subtract(reply.PostTime.ToLocalTime()).Humanize() ago
                    </span>
                    <p>@reply.CommentText</p>
                    <AuthorizeView>
                        <Authorized>
                            <div class="comment-actions">
                                <ul>
                                    <li><a style="cursor: pointer; color: #6bd005" @onclick="() => ShowReplyModal(reply.Id)">Reply</a></li>
                                @if (context.User.Claims.GetUserId() == reply.Commenter.Id)
                                {
                                    <li><a @onclick="() => ShowDeleteModal(reply.Id)">Delete</a></li>
                                }
                                </ul>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <small style="margin-bottom: 1px;"><LoginDisplay /> to comment.</small>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        }
    }

}



@code {
    [Parameter] public List<CommentDTO> ProvidedComments { get; set; }
    [Parameter] public int PostId { get; set; }

    private List<CommentDTO> Comments;

    private string CommenterUsername = "";
    private int ReplyingCommentId;
    private string ReplyText = "";
    private int DeleteCommentId;
    private string replyCommentMessage = "";

    PopupModal deleteModalRef;
    PopupModal replyModalRef;

    private void OnValidSubmit(CommentDTO comment)
    {
        Comments.Add(comment);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Comments = ProvidedComments.OrderByDescending(x => x.PostTime).ToList();

    }


    private void ShowDeleteModal(int commentId)
    {
        deleteModalRef.Open();
        DeleteCommentId = commentId;

    }

    private void HideDeleteModal()
    {
        deleteModalRef.Close();
    }

    private void HideReplyModal()
    {
        replyModalRef.Close();
    }

    private void ShowReplyModal(int commentId)
    {
        ReplyingCommentId = commentId;
        CommenterUsername = Comments.Where(x => x.Id == commentId).FirstOrDefault().Commenter.Username;
        replyModalRef.Open();
    }

    private async Task DeleteComment()
    {
        await postRepository.DeleteComment(DeleteCommentId);
        var c = Comments.Where(x => x.Id == DeleteCommentId).FirstOrDefault();
        Comments.Remove(c);

        HideDeleteModal();
    }


    private async Task PostReply()
    {
        var pcomment = Comments.Where(x => x.Id == ReplyingCommentId).FirstOrDefault();
        replyCommentMessage = "";
        if (string.IsNullOrWhiteSpace(ReplyText))
        {
            replyCommentMessage = "You cannot post an empty comment";
            return;
        }
        if (ReplyText.Length > 2000)
        {
            replyCommentMessage = "Your comment cannot exceed 2000 characters.";
            return;
        }
        ReplyCommentDTO reply = new ReplyCommentDTO
        {
            CommentText = ReplyText,
            ParentComment = pcomment,
            ParentPostId = PostId,
        };
        var newcomment = await postRepository.PostReply(reply);
        var main = Comments.Where(x => x.Id == ReplyingCommentId).FirstOrDefault();
        main.ReplyComments.Add(newcomment);
        CommenterUsername = "";
        ReplyingCommentId = 0;
        ReplyText = "";
        StateHasChanged();
        replyModalRef.Close();
        //await HideModal();
    }

}
