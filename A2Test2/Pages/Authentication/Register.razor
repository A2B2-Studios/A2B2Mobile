@page "/register"

@inject IAccountsRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService

@using A2Test2.Authentication
@using A2Test2.Repository
@using A2Test2.DTOs




<div class="container bg-dark rounded p-4 border-top border-bottom border-primary mb-lg-5">
    <h3>Register</h3>

    <EditForm Model="userInfo" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />

        <ul>
            @if (Errors.Count() > 0)
            {
                <p style="color: red;">There an error with your registration. Please fix the following:</p>
            }
            @foreach (var error in Errors)
            {
                <li style="color: red;">@error</li>
            }
        </ul>

        <div class="form-group">
            <label>Username:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.Username" />
                <ValidationMessage For="@(() => userInfo.Username)" />
            </div>
        </div>

        <div class="form-group">
            <label>Email:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.Email" />
                <ValidationMessage For="@(() => userInfo.Email)" />
            </div>
        </div>

        <div class="form-group">
            <label>Password:</label>
            <div>
                <InputText type="password" class="form-control" @bind-Value="@userInfo.Password" />
                <ValidationMessage For="@(() => userInfo.Password)" />
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Register</button>

    </EditForm>
</div>


@code {
    private UserInfo userInfo = new UserInfo();
    private List<string> Errors = new List<string>();

    private async Task CreateUser()
    {
        var userToken = await accountsRepository.Register(userInfo);

        if (!string.IsNullOrEmpty(userToken.ErrorMessage))
        {
            Errors = userToken.ErrorMessage.Split(",").ToList();
            StateHasChanged();
            return;
        }

        await loginService.Login(userToken.Token);
        navigationManager.NavigateTo("");
    }
}